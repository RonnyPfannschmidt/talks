<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="build/presentation.css">
    </head>
    <body>
        <div class="reveal">
            <div class="slides"><section><h1>annotated assertions</h1>
<h2>debugging without kludges</h2>
</section><section><h2>Whoami</h2>
<ul>
<li>Pytest maintainer</li>
<li>love approachable debugging</li>
</ul>
</section><section><h3>Asserts in python core</h3>
<div class="highlight"><pre><span></span>$ python -m unittest ex.py  -k it
F
======================================================================
FAIL: test_it (ex.TestUnittest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;/home/ronny/Projects/RonnyPfannschmidt/talks/ex.py&quot;, line 11, in test_it
    self.assertEqual(a, b)
AssertionError: Items in the first set but not the second:
&#39;1&#39;
Items in the second set but not the first:
&#39;5&#39;

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
</pre></div>
</section><section><h3>Asserts in pytest</h3>
<div class="highlight"><pre><span></span>$ pytest ex.py -k side 
==================================================================================================================================================== test session starts =====================================================================================================================================================
platform linux -- Python 3.9.4, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /home/ronny/Projects/RonnyPfannschmidt/talks
collected 5 items / 4 deselected / 1 selected                                                                                                                                                                                                                                                                                

ex.py F                                                                                                                                                                                                                                                                                                                [100%]

========================================================================================================================================================== FAILURES ==========================================================================================================================================================
______________________________________________________________________________________________________________________________________________________ test_sideeffect _______________________________________________________________________________________________________________________________________________________

    def test_sideeffect():
      a = [1]

&gt;     assert a.pop() == 2
E     assert 1 == 2
E      +  where 1 = &lt;built-in method pop of list object at 0x7fed6a676d80&gt;()
E      +    where &lt;built-in method pop of list object at 0x7fed6a676d80&gt; = [].pop

ex.py:24: AssertionError
================================================================================================================================================== short test summary info ===================================================================================================================================================
FAILED ex.py::test_sideeffect - assert 1 == 2


</pre></div>
</section><section><h3>Mistakes have been made</h3>
<ul>
<li><p>pytest prior to <code>2.1</code> was reinterpreting assertions</p>
</li>
<li><p>no example here, not even going to try to install a 10 year old pytest these days ^^</p>
</li>
</ul>
</section><section><h3>Mistakes are still being made</h3>
<div class="highlight"><pre><span></span>$ hammett ex.py -k sideeffect
F

Failed: .ex.test_sideeffect
Traceback (most recent call last):
  File &quot;.../site-packages/hammett/impl.py&quot;, line 527, in run_test
    resolved_function(**resolved_kwargs)
  File &quot;ex.py&quot;, line 24, in test_sideeffect
    assert a.pop() == 2
AssertionError



--- Local variables ---
a:
    []

--- Assert components ---
Failed to analyze assert statement (&lt;class &#39;IndexError&#39;&gt;: pop from empty list)

0 succeeded, 1 failed, 0 skipped

</pre></div>
</section><section><h3>rough idea of What i want to see in  python</h3>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">test_sideeffect</span><span class="p">():</span>
  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>

  <span class="k">assert</span> <span class="n">a</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">==</span> <span class="mi">2</span>
</pre></div>
<div class="highlight py3tb"><pre><span></span><span class="x">AssertionError: a.pop() == 2</span>
<span class="x">  where:</span>
<span class="x">    `a` was [1]</span>
<span class="x">    `a.pop()` returned 1</span>
<span class="x">    `a` is []</span>
</pre></div>
<div class="highlight python"><pre><span></span><span class="k">def</span> <span class="nf">test_interesting_missed</span><span class="p">():</span>
    <span class="n">val</span> <span class="o">=</span> <span class="s2">&quot;this could be something very important&quot;</span>
    <span class="k">assert</span> <span class="n">val</span> <span class="ow">is</span> <span class="kc">None</span>
</pre></div>
<div class="highlight text"><pre><span></span>AssertionError: val is None
  where:
    `val` is &quot;this could be something very important&quot;
</pre></div>
</section><section><h3>what pytest does</h3>
<div class="highlight python"><pre><span></span>    <span class="c1"># Now actually insert the special imports.</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">aliases</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s2">&quot;builtins&quot;</span><span class="p">,</span> <span class="s2">&quot;@py_builtins&quot;</span><span class="p">,</span> <span class="n">lineno</span><span class="o">=</span><span class="n">lineno</span><span class="p">,</span> <span class="n">col_offset</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span>
                <span class="s2">&quot;_pytest.assertion.rewrite&quot;</span><span class="p">,</span>
                <span class="s2">&quot;@pytest_ar&quot;</span><span class="p">,</span>
                <span class="n">lineno</span><span class="o">=</span><span class="n">lineno</span><span class="p">,</span>
                <span class="n">col_offset</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
            <span class="p">),</span>
        <span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">aliases</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s2">&quot;builtins&quot;</span><span class="p">,</span> <span class="s2">&quot;@py_builtins&quot;</span><span class="p">),</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s2">&quot;_pytest.assertion.rewrite&quot;</span><span class="p">,</span> <span class="s2">&quot;@pytest_ar&quot;</span><span class="p">),</span>
        <span class="p">]</span>
</pre></div>
</section><section><h3>and then ...</h3>
<p>many  like this (breaks semi-regular on python updates)</p>
<div class="highlight python"><pre><span></span>
    <span class="k">def</span> <span class="nf">visit_Name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="c1"># Display the repr of the name if it&#39;s a local variable or</span>
        <span class="c1"># _should_repr_global_name() thinks it&#39;s acceptable.</span>
        <span class="n">locs</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">Call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">builtin</span><span class="p">(</span><span class="s2">&quot;locals&quot;</span><span class="p">),</span> <span class="p">[],</span> <span class="p">[])</span>
        <span class="n">inlocs</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Str</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">id</span><span class="p">),</span> <span class="p">[</span><span class="n">ast</span><span class="o">.</span><span class="n">In</span><span class="p">()],</span> <span class="p">[</span><span class="n">locs</span><span class="p">])</span>
        <span class="n">dorepr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="s2">&quot;_should_repr_global_name&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="n">test</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">BoolOp</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Or</span><span class="p">(),</span> <span class="p">[</span><span class="n">inlocs</span><span class="p">,</span> <span class="n">dorepr</span><span class="p">])</span>
        <span class="n">expr</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">IfExp</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="n">ast</span><span class="o">.</span><span class="n">Str</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">explanation_param</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
</pre></div>
</section></div>
        </div>
        <script src="build/presentation.js"></script>
        <script>
            Reveal.initialize({
                transition: 'linear',
                keyboard: {39: 'next', 37: 'prev'}
            });
        </script>
    </body>
</html>
